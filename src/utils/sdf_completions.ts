export const sdfCompletions = [
    {
      label: "sdf_sphere",
      type: "function",
      detail: "sdf_sphere(center=(0.5, 0.5, 0.5), radius=0.3)",
      info: "Signed distance field of a sphere.",
    },
    {
      label: "sdf_box",
      type: "function",
      detail: "sdf_box(bounds=(0.5, 0.5, 0.5), center=(0.5, 0.5, 0.5))",
      info: "SDF of an axis-aligned box.",
    },
    {
      label: "sdf_rounded_box",
      type: "function",
      detail: "sdf_rounded_box(bounds=(0.5, 0.5, 0.5), radius=0.1, center=(0.5, 0.5, 0.5))",
      info: "SDF of a box with rounded edges.",
    },
    {
      label: "sdf_box_frame",
      type: "function",
      detail: "sdf_box_frame(bounds, edge_thickness, center)",
      info: "SDF of a hollow box frame.",
    },
    {
      label: "sdf_torus",
      type: "function",
      detail: "sdf_torus(center, major_radius, minor_radius)",
      info: "SDF of a torus.",
    },
    {
      label: "sdf_capped_torus",
      type: "function",
      detail: "sdf_capped_torus(sc, ra, rb, center)",
      info: "SDF of a capped torus shape.",
    },
    {
      label: "sdf_link",
      type: "function",
      detail: "sdf_link(le, r1, r2, center)",
      info: "SDF of a link shape.",
    },
    {
      label: "sdf_cone",
      type: "function",
      detail: "sdf_cone(c=(sinθ, cosθ), h=height, center)",
      info: "Simple cone SDF using dot product.",
    },
    {
      label: "sdf_hex_prism",
      type: "function",
      detail: "sdf_hex_prism(h, center)",
      info: "SDF of a hexagonal prism.",
    },
    {
      label: "sdf_tri_prism",
      type: "function",
      detail: "sdf_tri_prism(h, center)",
      info: "SDF of a triangular prism.",
    },
    {
      label: "sdf_capsule",
      type: "function",
      detail: "sdf_capsule(a, b, r, center)",
      info: "SDF of a capsule between points a and b with radius r.",
    },
    {
      label: "sdf_capped_cylinder",
      type: "function",
      detail: "sdf_capped_cylinder(a, b, r, center)",
      info: "SDF of a capped cylinder from point a to b with radius r.",
    },
    {
      label: "sdf_rounded_cylinder",
      type: "function",
      detail: "sdf_rounded_cylinder(ra, rb, h, center)",
      info: "SDF of a rounded cylinder with radius ra, corner rounding rb, and height h.",
    },
    {
      label: "sdf_capped_cone",
      type: "function",
      detail: "sdf_capped_cone(a, b, ra, rb, center)",
      info: "SDF of a capped cone from point a to b with radii ra and rb.",
    },
    {
      label: "sdf_cut_sphere",
      type: "function",
      detail: "sdf_cut_sphere(r, h, center)",
      info: "SDF of a sphere cut flat below height h.",
    },
    {
      label: "sdf_cut_hollow_sphere",
      type: "function",
      detail: "sdf_cut_hollow_sphere(r, h, t, center)",
      info: "SDF of a hollow sphere cut flat below height h and thickness t.",
    },
    {
      label: "sdf_round_cone",
      type: "function",
      detail: "sdf_round_cone(a, b, r1, r2, center)",
      info: "SDF of a cone between points a and b with rounded radii r1 and r2.",
    },
    {
      label: "sdf_ellipsoid",
      type: "function",
      detail: "sdf_ellipsoid(r, center)",
      info: "SDF of an ellipsoid with radii r = (rx, ry, rz).",
    },
    {
      label: "sdf_pyramid",
      type: "function",
      detail: "sdf_pyramid(h, center)",
      info: "SDF of a square pyramid with height h.",
    },
    {
      label: "sdf_octahedron",
      type: "function",
      detail: "sdf_octahedron(s, center)",
      info: "SDF of an octahedron of size s centered at center.",
    },
    {
      label: "wave_pattern",
      type: "function",
      detail: "wave_pattern(freq)",
      info: "Sinusoidal wave field in 3D.",
    },
    {
      label: "gyroid",
      type: "function",
      detail: "gyroid(freq)",
      info: "Gyroid triply periodic minimal surface field.",
    },
    {
      label: "op_tx",
      type: "function",
      detail: "op_tx(transform_matrix, primitive_fn)",
      info: "Applies a transform to an SDF function.",
    },
    {
      label: "translate",
      type: "function",
      detail: "translate(tx, ty, tz)",
      info: "Creates a translation matrix.",
    },
    {
      label: "scale",
      type: "function",
      detail: "scale(sx, sy, sz)",
      info: "Creates a scaling matrix.",
    },
    {
      label: "rotate_x",
      type: "function",
      detail: "rotate_x(theta)",
      info: "Creates a rotation matrix around the X axis.",
    },
    {
      label: "rotate_y",
      type: "function",
      detail: "rotate_y(theta)",
      info: "Creates a rotation matrix around the Y axis.",
    },
    {
      label: "rotate_z",
      type: "function",
      detail: "rotate_z(theta)",
      info: "Creates a rotation matrix around the Z axis.",
    },
    {
      label: "combine",
      type: "function",
      detail: "combine(*matrices)",
      info: "Combines multiple transform matrices.",
    },
    {
      label: "smooth_step",
      type: "function",
      detail: "smooth_step(edge0, edge1, x)",
      info: "Smooth Hermite interpolation.",
    },
    {
      label: "clamp",
      type: "function",
      detail: "clamp(x, min_val, max_val)",
      info: "Clamps x between min_val and max_val.",
    },
    {
      label: "normalize_to_sdf_range",
      type: "function",
      detail: "normalize_to_sdf_range(field)",
      info: "Maps a scalar field to the range [-1, 1].",
    },
    {
      label: "union",
      type: "function",
      detail: "union(a, b)",
      info: "Takes the minimum of two fields.",
    },
    {
      label: "intersection",
      type: "function",
      detail: "intersection(a, b)",
      info: "Takes the maximum of two fields.",
    },
    {
      label: "difference",
      type: "function",
      detail: "difference(a, b)",
      info: "Subtracts one field from another.",
    },
    {
      label: "xor",
      type: "function",
      detail: "xor(a, b)",
      info: "Exclusive OR of two fields.",
    },
    {
      label: "smooth_union",
      type: "function",
      detail: "smooth_union(a, b, k)",
      info: "Soft blend between a and b.",
    },
    {
      label: "smooth_intersection",
      type: "function",
      detail: "smooth_intersection(a, b, k)",
      info: "Soft intersection between a and b.",
    },
    {
      label: "smooth_difference",
      type: "function",
      detail: "smooth_difference(a, b, k)",
      info: "Soft difference of b from a.",
    },
    {
      label: "lerp",
      type: "function",
      detail: "lerp(a, b, t)",
      info: "Linear interpolation between a and b.",
    },
    {
      label: "blend",
      type: "function",
      detail: "blend(a, b, mask)",
      info: "Blends a and b based on mask weight.",
    },
    {
      label: "op_round",
      type: "function",
      detail: "op_round(primitive, rad)",
      info: "Rounds sharp corners.",
    },
    {
      label: "op_onion",
      type: "function",
      detail: "op_onion(primitive, thickness)",
      info: "Gives thickness to an SDF.",
    },
    {
      label: "op_displace",
      type: "function",
      detail: "op_displace(primitive, displacement_fn)",
      info: "Applies a displacement function to an SDF.",
    },
    {
      label: "op_twist",
      type: "function",
      detail: "op_twist(primitive, center, axis)",
      info: "Applies a twist to an SDF.",
    },
    {
      label: "op_cheap_bend",
      type: "function",
      detail: "op_cheap_bend(primitive, k, center, axis, bend_axis)",
      info: "Applies a bend to an SDF.",
    }
  ];